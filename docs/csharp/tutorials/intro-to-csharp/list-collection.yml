### YamlMime:Tutorial
title: Informazioni su come gestire le raccolte dati tramite il tipo di elenco generico
metadata:
  title: Raccolte dati - Esercitazione interattiva introduttiva su C#
  description: In questa esercitazione si userà il browser per imparare a usare C# in modo interattivo. Verranno descritte le procedure per scrivere codice C# e visualizzare i risultati della compilazione ed esecuzione del codice direttamente nel browser.
  audience: Developer
  ms.custom: mvc
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 6b7a00a0d7ea17ab48e673b735bdd1a77328c099
  ms.sourcegitcommit: c93fd5139f9efcf6db514e3474301738a6d1d649
  ms.translationtype: HT
  ms.contentlocale: it-IT
  ms.lasthandoff: 10/28/2018
  ms.locfileid: "50200167"
items:
- durationInMinutes: 1
  content: >
    Questa esercitazione presenta C# in modo interattivo, usando il browser per scrivere codice C# e visualizzare i risultati della compilazione e dell'esecuzione del codice. L'esercitazione è composta da una serie di lezioni che descrivono come creare, modificare ed esplorare raccolte e matrici.
- title: Creare elenchi
  durationInMinutes: 2
  content: >
    Eseguire il codice seguente nella finestra interattiva. A tale scopo, digitare il blocco di codice seguente nella finestra interattiva (sostituire `<name>` con il proprio nome) e fare clic sul pulsante **Esegui**:


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Questo codice consente di creare un elenco di stringhe, aggiungere tre nomi all'elenco e stampare i nomi in lettere maiuscole. Vengono usati i concetti appresi nelle esercitazioni precedenti per eseguire il ciclo dell'elenco.


    Il codice per visualizzare i nomi usa la funzionalità di [interpolazione di stringhe](../../language-reference/tokens/interpolated.md). Anteponendo il carattere `$` a `string`, è possibile incorporare il codice C# nella dichiarazione della stringa. La stringa effettiva sostituisce il codice C# con il valore generato. In questo esempio, `{name.ToUpper()}` viene sostituito con ogni nome, convertito in lettere maiuscole, perché è stato chiamato il metodo <xref:System.String.ToUpper%2A?displayProperty=nameWithType>.


    L'esplorazione continua nelle prossime lezioni.


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Modificare il contenuto dell'elenco
  durationInMinutes: 3
  content: >
    La raccolta creata usa il tipo <xref:System.Collections.Generic.List%601>. Questo tipo archivia sequenze di elementi. Il tipo degli elementi viene specificato tra parentesi uncinate.


    Un aspetto importante di questo tipo di <xref:System.Collections.Generic.List%601> è che supporta estensioni o riduzioni, consentendo l'aggiunta o la rimozione di elementi. Aggiungere il codice seguente sotto il codice già scritto:


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Sono stati aggiunti altri due nomi alla fine dell'elenco e ne è stato anche rimosso uno.


    <xref:System.Collections.Generic.List%601> consente di fare riferimento a singoli elementi anche in base all'**indice**. Per accedere agli elementi si usano i token `[` e `]`. Aggiungere il codice seguente sotto il codice già scritto e provarlo:


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    Non è consentito l'accesso oltre la fine dell'elenco. È possibile controllare la lunghezza dell'elenco tramite la proprietà <xref:System.Collections.Generic.List%601.Count%2A>. Aggiungere il codice seguente per provarlo:


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    Fare clic su **Esegui** di nuovo per visualizzare i risultati. In C# gli indici iniziano da 0, pertanto l'indice massimo valido è minore di un'unità rispetto al numero di elementi nell'elenco.


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Eseguire ricerche negli elenchi e ordinarli
  durationInMinutes: 5
  content: >
    In questi esempi vengono usati elenchi relativamente piccoli, ma le applicazioni reali creano spesso elenchi con molti più elementi, a volte anche migliaia. Per trovare elementi in raccolte di tali dimensioni, è necessario avere la possibilità di eseguire ricerche nell'elenco. Il metodo <xref:System.Collections.Generic.List%601.IndexOf%2A> cerca un elemento e ne restituisce l'indice. Provare questo codice per verificarne il funzionamento.  Aggiungere il codice seguente sotto il codice già scritto finora:


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    Si potrebbe non sapere se un elemento è presente nell'elenco, quindi è consigliabile controllare sempre l'indice restituito da <xref:System.Collections.Generic.List%601.IndexOf%2A>. Se è 1, l'elemento non è stato trovato.


    Gli elementi in un elenco possono anche essere ordinati. Il metodo <xref:System.Collections.Generic.List%601.Sort%2A> ordina tutti gli elementi nell'elenco in base all'ordine normale (alfabetico nel caso delle stringhe). Aggiungere questo codice ed eseguire di nuovo:


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Elenchi di altri tipi
  durationInMinutes: 5
  content: >
    Finora è stato usato il tipo `string` negli elenchi. Di seguito verrà creato un <xref:System.Collections.Generic.List%601> con un tipo diverso. Per iniziare, creare un set di numeri. Eliminare il codice scritto finora e sostituirlo con questo:


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    Questo codice crea un elenco di interi e imposta i primi due interi sul valore 1. Questi sono i primi due valori di una *successione di Fibonacci*, ovvero una sequenza di numeri. Ogni numero della successione di Fibonacci viene ottenuto dalla somma dei due numeri precedenti. Aggiungere questo codice:


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Premere **Esegui** per visualizzare i risultati.


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Esercizio
  durationInMinutes: 10
  content: >
    È il momento di scoprire se è possibile mettere in pratica alcuni dei concetti appresi in questa lezione e in quelle precedenti. Applicare i concetti appresi finora in relazione ai numeri di Fibonacci. Provare a scrivere il codice per generare i primi 20 numeri nella successione. Tenere presente che il 20° numero di Fibonacci è 6765.


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Completare l'esercizio
  durationInMinutes: 3
  content: "I risultati ottenuti sono simili a questi?\n\n```csharp\nvar fibonacciNumbers = new List<int> {1, 1};\n\nwhile (fibonacciNumbers.Count < 20)\n{\n    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];\n    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];\n    \n    fibonacciNumbers.Add(previous + previous2);\n}\nforeach(var item in fibonacciNumbers)\n    Console.WriteLine(item);\n```\n\nA ogni iterazione del ciclo, gli ultimi due interi nell'elenco vengono sommati e il valore risultante viene aggiunto all'elenco. Il ciclo viene ripetuto fino ad aggiungere 20 elementi all'elenco.\n\n> [!NOTE]\n> Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).\n"
- content: >-
    È stata completata questa esercitazione dedicata agli elenchi. Questa esercitazione è l'esercitazione interattiva finale. È possibile continuare con queste esercitazioni nell'ambiente di sviluppo. Dopo aver acquisito familiarità con i concetti di base dello [sviluppo locale](local-environment.md), scegliere un'esercitazione. È possibile provare questo stesso esercizio, passare direttamente all'esercitazione successiva o iniziare da capo con l'esercitazione [Numeri in C#](numbers-in-csharp-local.md).


    Altre informazioni sull'uso del tipo `List` sono disponibili nell'argomento della [Guida di .NET](../../../standard/index.md) dedicato alle [raccolte](../../../standard/collections/index.md). Questo argomento include anche informazioni su molti altri tipi di raccolta.
