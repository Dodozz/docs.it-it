### YamlMime:Tutorial
title: Esplorare C# 7.0 - Esercitazione interattiva su C#
metadata:
  title: Esplorare C# 7.0 - Provare le nuove funzionalità in C# 7.0 in modo interattivo, usando il browser
  description: In questa esercitazione si userà il browser per esplorare C# 7.0 in modo interattivo. Si esamineranno i nuovi elementi che è possibile usare con C# 7.0 e che rendono il codice più conciso e leggibile.
  audience: Developer
  level: intermediate
  ms.date: 03/20/2019
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 1b1de22769c86f75684f41635287a73558d1d15a
  ms.sourcegitcommit: 2701302a99cafbe0d86d53d540eb0fa7e9b46b36
  ms.translationtype: HT
  ms.contentlocale: it-IT
  ms.lasthandoff: 04/28/2019
  ms.locfileid: "64750373"
items:
- durationInMinutes: 1
  content: >
    Questa esercitazione consente di esplorare le funzionalità di C# 7.0 in modo interattivo, usando il browser per scrivere codice C# e visualizzare i risultati della compilazione e dell'esecuzione del codice. L'esercitazione contiene una serie di lezioni che modificano le procedure C# precedenti, in modo da usare le nuove funzionalità, più concise, del linguaggio C# 7.0. Il resto di questo articolo offre una panoramica di ognuna di queste funzionalità, con un collegamento per esplorare ciascuna di esse più in dettaglio.
- title: Dichiarazioni di variabili out nella posizione di assegnazione
  durationInMinutes: 2
  content: "La sintassi esistente che supporta i parametri `out` è stata migliorata in questa versione. Scegliere il pulsante *Attiva la modalità messa a fuoco* nella parte inferiore della pagina, quindi provare il codice seguente nella finestra interattiva: \n\n[!code-csharp[OutVariableOldStyle](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableOldStyle \"classic out variable declaration\")]\n\nOra è possibile dichiarare variabili `out` nell'elenco di argomenti di una chiamata al metodo, anziché scrivere un'istruzione di dichiarazione separata. È possibile spostare la dichiarazione nella chiamata al metodo. Aggiungere il codice seguente nella parte inferiore della finestra interattiva:\n\n[!code-csharp[OutVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableDeclarations \"Out variable declarations\")]\n\nÈ possibile convertire la dichiarazione `int` in una dichiarazione `var`. Aggiungere il codice seguente alla finestra interattiva:\n\n[!code-csharp[OutVarVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVarVariableDeclarations \"Implicitly typed Out variable\")]\n\nLa nuova sintassi offre due vantaggi importanti rispetto alla sintassi esistente:\n\n* Il codice è più facile da leggere. \n    - Si dichiara la variabile out nel punto in cui viene usata, non in una riga precedente.\n* Non è necessario assegnare un valore iniziale.\n    - Dichiarando la variabile `out` nel punto in cui viene usata in una chiamata al metodo, non è possibile usarla accidentalmente prima che venga assegnata.\n\nL'ambito della variabile dichiarata è quello che include l'istruzione `if`. In questo modo è possibile usare la variabile in un secondo momento. Modificare l'ultimo blocco `if` come illustrato nel frammento di codice seguente.\n\n```csharp\nif (!int.TryParse(input, out int result))\n{    \n    return null;\n}\n\nConsole.WriteLine(result);\n```\n"
- title: Le tuple creano strutture dei dati leggere
  durationInMinutes: 1
  content: "Le tuple sono strutture di dati leggere che contengono più campi per rappresentare i membri dati. I campi non vengono convalidati e non è possibile definire metodi personalizzati.\n\n> [!NOTE]\n> Le tuple erano già disponibili prima di C# 7.0, ma in modo poco efficiente e senza supporto del linguaggio. Questo significava poter fare riferimento agli elementi delle tuple solo come `Item1`, `Item2` e così via. C# 7.0 introduce il supporto del linguaggio per le tuple, che consente nomi semantici per i campi di una tupla con tipi di tupla nuovi e più efficienti.\n\nÈ possibile creare una tupla assegnando un valore a ogni membro con nome:\n\n[!code-csharp[NamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#NamedTuple \"Named tuple\")]\n\nLa tupla `namedLetters` contiene campi detti `Alpha` e `Beta`. Tali nomi esistono solo in fase di compilazione e non vengono mantenuti in fase di runtime, ad esempio quando si esamina la tupla tramite reflection.\n\nIn un'assegnazione di tupla è anche possibile specificare i nomi dei campi sul lato destro dell'assegnazione: \n\n[!code-csharp[ImplicitNamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#ImplicitNamedTuple \"Implicitly named tuple\")]\n\nÈ possibile specificare nomi per i campi sia a sinistra che a destra dell'assegnazione, ma i nomi sul lato destro vengono ignorati.\n\nLe tuple sono particolarmente utili come tipi restituiti per i metodi `private` e `internal`. Le tuple offrono una sintassi semplice per consentire a tali metodi di restituire più valori distinti.\n\nLa creazione di una tupla è più efficiente e più produttiva rispetto alla creazione di una classe o struct. La tupla ha una sintassi più semplice e leggera per definire una struttura dei dati che contiene più di un valore. Il metodo di esempio riportato di seguito restituisce i valori minimo e massimo trovati in una sequenza di interi. Aggiungere il codice seguente nel browser per provare il funzionamento:\n\n[!code-csharp[TupleReturningMethod](~/samples/snippets/csharp/new-in-7/program.cs#TupleReturningMethod \"Tuple returning method\")]\n\nPuò rendersi necessario decomprimere i membri di una tupla che sono stati restituiti da un metodo.  In questo caso è possibile dichiarare variabili separate per ogni valore nella tupla. Questa operazione è detta *decostruzione* della tupla. Aggiungere il codice seguente nel browser per provare il funzionamento:\n\n[!code-csharp[CallingWithDeconstructor](~/samples/snippets/csharp/new-in-7/program.cs#CallingWithDeconstructor \"Deconstructing a tuple\")]\n\nQuando si lavora con le tuple spesso si rileverà che non vengono usati tutti i membri di un risultato della tupla. In questi casi è possibile rimuovere uno o più valori restituiti usando `_` al posto di una variabile. Aggiungere il codice seguente nel browser per provare il funzionamento:\n\n[!code-csharp[DiscardTupleMember](~/samples/snippets/csharp/new-in-7/program.cs#DiscardMember \"Discard a tuple member\")]\n\nInformazioni più approfondite sulle tuple sono disponibili nell'[articolo relativo alle tuple](../../tuples.md).\nAltre informazioni sulle variabili discard sono disponibili nell'[articolo sulle variabili discard](../../discards.md).\n"
- title: Usare il criterio del tipo con l'espressione is
  durationInMinutes: 2
  content: >
    L'espressione con criterio `is` estende il noto [operatore `is`](../../language-reference/keywords/is.md#pattern-matching-with-is) per l'esecuzione di query su un oggetto oltre il relativo tipo.


    Provare il codice seguente nella finestra del browser:


    [!code-csharp[SimpleIs](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleIsPattern "Simple Is pattern")]


    Convertire la dichiarazione della variabile in una stringa:


    ```csharp

    object count = "5";

    ```


    Ora l'espressione `is` è false, pertanto viene eseguito il ramo `else`. Provare a sostituire `count` con `number` nel ramo else:


    ```csharp

    Console.WriteLine($"{number} is not an integer");

    ```


    Il codice precedente non viene compilato, perché `number` non è assegnato nel ramo `else`. È assegnato solo nel ramo `true` dell'istruzione `if`.


    Il criterio del tipo espressione `is` è utile quando il numero di tipi da sottoporre a test è ridotto. Spesso è invece necessario eseguire il test di molti tipi. In tal caso è necessaria l'istruzione dei criteri di ricerca `switch`.
- title: Criteri di ricerca nell'istruzione switch
  durationInMinutes: 2
  content: >
    L'*espressione di ricerca* ha una sintassi familiare, basata sull'istruzione `switch` che fa già parte del linguaggio C#. Per iniziare si consideri un piccolo campione basato sulla sintassi dell'espressione `is` esaminata nella pagina precedente:


    [!code-csharp[SimpleSwitch](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleSwitchPattern "simple switch")]


    Il codice precedente cerca un elemento `int` o `null`. Tutti gli altri tipi hanno raggiunto il case predefinito. Aggiungere le due righe seguenti per verificare il comportamento:


    [!code-csharp[AddLongCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestLong "Add a case for long")]


    L'espressione `switch` converte un tipo nullable nel tipo corrispondente. Aggiungere quanto segue per la verifica:


    [!code-csharp[NullableCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#NullableSwitch "Add a nullable case")]


    È possibile aggiungere un numero qualsiasi di altre espressioni di criterio del tipo alle istruzioni switch. Aggiungere quanto segue prima del case `null`:


    [!code-csharp[MoreTypeCases](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreCases "Add more type cases")]


    Assicurarsi che questi elementi funzionino aggiungendo i test seguenti:


    [!code-csharp[AddMoreTests](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreTests "Add more type tests")]


    Le espressioni di ricerca supportano anche le costanti. Ciò consente di risparmiare tempo eseguendo il factoring dei casi semplici:


    [!code-csharp[ConstantCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#ConstantCase "Add a constant case")]


    È necessario aggiungere il case precedente *prima* dell'espressione `case int:`. Se lo si aggiunge dopo tale case, il compilatore segnala che è già stato gestito da un case precedente.


    È possibile aggiungere una clausola `when` a qualsiasi case di criterio per eseguire il test di altre condizioni oltre a un tipo o a un valore di costante. Provare aggiungendo il case seguente sopra il case `string` generale:


    [!code-csharp[WhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#WhenClause "Add a when clause")]


    Eseguire quindi il test con codice simile al seguente:


    [!code-csharp[TestWhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestWhenClause "Test the when clause")]


    La nuova sintassi per le espressioni di criteri di ricerca, più chiara e concisa, semplifica la creazione degli algoritmi di invio sulla base del tipo di un oggetto o di altre proprietà. Le espressioni di criteri di ricerca abilitano questi costrutti per i tipi di dati non correlati per ereditarietà.


    Altre informazioni sui criteri di ricerca sono disponibili nell'articolo dedicato ai [criteri di ricerca in C#](../../pattern-matching.md).
- title: Ottimizzare l'archiviazione in memoria usando variabili locali e valori restituiti per riferimento
  durationInMinutes: 2
  content: >
    Questa funzionalità abilita algoritmi che usano e restituiscono riferimenti a variabili definite altrove. Un esempio è la gestione di matrici di grandi dimensioni e la definizione di un'unica posizione con determinate caratteristiche. Un metodo restituirebbe due indici per una singola posizione nella matrice:


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#EverythingByValue "return indices by value")]


    Per eseguire il test del metodo usare il codice seguente:


    [!code-csharp[TestByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return indices by value")]



    Questo metodo `Find` restituisce gli indici all'elemento nella matrice. Ciò induce i chiamanti a scrivere codice che usa tali indici per dereferenziare la matrice e modificare un singolo elemento. È più opportuno scrivere un metodo che restituisce un *riferimento* all'elemento della matrice che si vuole modificare.


    Verrà ora analizzata una serie di modifiche per illustrare la funzionalità delle variabili locali ref e la procedura di creazione di un metodo che restituisce un riferimento all'archiviazione interna. Si apprenderanno anche le regole per i valori restituiti ref e le variabili locali ref che consentono di evitare usi impropri della funzionalità.


    Iniziare modificando la dichiarazione di metodo `Find` in modo che restituisca un oggetto `ref int` anziché una tupla.


    ```csharp

    ref int Find(int[,] matrix, Func<int, bool> predicate)

    ```


    Modificare l'istruzione return in modo che restituisca l'elemento in corrispondenza degli indici corretti:


    ```csharp

    return matrix[i,j];

    ```


    Modificare il valore restituito finale in modo da generare un'eccezione:


    ```csharp

    throw new InvalidOperationException("Not found");

    ```


    Si noti che questo codice non verrà compilato. La dichiarazione del metodo indica un valore restituito `ref`, ma l'istruzione return specifica un valore restituito value. È necessario aggiungere la parola chiave `ref` a ogni istruzione return. Ciò indica la restituzione per riferimento e consente agli sviluppatori che leggono il codice di ricordare in seguito che il metodo restituisce per riferimento:


    ```csharp

    return ref matrix[i,j];

    ```


    Ora che il metodo restituisce un riferimento al valore integer della matrice, è necessario modificare il punto in cui viene chiamato. La dichiarazione `var` significa che `valItem` è ora un oggetto `int` anziché una tupla. Modificare il codice chiamante come segue:


    ```csharp

    var valItem = Find(matrix, (val) => val == 42);

    Console.WriteLine(valItem);

    valItem = 24;

    Console.WriteLine(matrix[4, 2]);

    ```


    La seconda istruzione `WriteLine` nell'esempio precedente stampa il valore `42`, non `24`. La variabile `valItem` è `int`, non `ref int`. La parola chiave `var` consente al compilatore di specificare il tipo, ma non aggiunge in modo implicito il modificatore `ref`. Il valore a cui fa riferimento `ref return` viene invece *copiato* nella variabile sul lato sinistro dell'assegnazione. La variabile non è una variabile locale `ref`.


    Per modificare il riferimento restituito è necessario aggiungere il modificatore `ref` alla dichiarazione di variabile locale e prima della chiamata di `Find`, per fare in modo che la variabile sia un riferimento quando il valore restituito è un riferimento. Modificare il codice di test nel browser per farlo corrispondere a quanto segue:


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return object by reference")]


    Ora la seconda istruzione `WriteLine` nell'esempio precedente produce il valore `24`, a indicare che la memorizzazione nella matrice è stata modificata. La variabile locale è stata dichiarata con il modificatore `ref` e accetterà un valore restituito `ref`. È necessario inizializzare una variabile `ref` quando viene dichiarata. Non è possibile separare la dichiarazione e l'inizializzazione.


    Il linguaggio C# usa altre tre regole per evitare usi impropri delle variabili locali e dei valori restituiti `ref`:


    * Non è possibile assegnare un valore restituito del metodo standard a una variabile locale `ref`.

    * Non è possibile restituire un oggetto `ref` a una variabile la cui durata non si estende oltre l'esecuzione del metodo.

    * Non è possibile usare variabili locali e valori restituiti `ref` con i metodi asincroni.


    L'aggiunta di variabili locali e valori restituiti ref abilita algoritmi più efficienti, evitando la copia dei valori o l'esecuzione ripetuta di operazioni di dereferenziazione.


    Per altre informazioni, vedere l'articolo relativo alla [parola chiave ref](../../language-reference/keywords/ref.md).
- title: Ridurre al minimo l'accesso al codice con le funzioni locali
  durationInMinutes: 2
  content: "Ora è possibile dichiarare funzioni locali annidate in altre funzioni. In questo modo è possibile ridurre al minimo la visibilità di queste funzioni. Esistono tre casi d'uso ovvi per le funzioni locali:\n\n- Funzioni ricorsive.\n- Metodi iterator.\n- Metodi asincroni.\n\nSi inizierà con i metodi ricorsivi. Provare il codice seguente nel browser per calcolare `6!` (fattoriale):\n\n```csharp\nint LocalFunctionFactorial(int n)\n{\n    return nthFactorial(n);\n\n    int nthFactorial(int number) => (number < 2) ? \n        1 : number * nthFactorial(number - 1);\n}\n\nConsole.WriteLine(LocalFunctionFactorial(6));\n```\n\nLe funzioni locali sono un ottimo modo per implementare gli algoritmi ricorsivi. Altri usi comuni sono i metodi iterator pubblici e i metodi async pubblici. Entrambi i tipi di metodi generano codice che segnala gli errori in ritardo rispetto a quanto previsto dai programmatori. Nel caso dei metodi iterator tutte le eccezioni vengono riscontrate solo quando si chiama il codice che enumera la sequenza restituita. Nel caso dei metodi async tutte le eccezioni vengono riscontrate solo quando è atteso l'oggetto restituito `Task`.\n\nI metodi iterator sono più semplici da esplorare nel browser, pertanto ora si useranno questi metodi per l'esplorazione. Provare a eseguire il codice seguente, che chiama un metodo iterator nel browser:\n\n[!code-csharp[IteratorMethod](~/samples/snippets/csharp/new-in-7/Iterator.cs#SnippetIteratorMethod \"Iterator method\")]\n\nEseguire il codice. Osservare che l'eccezione viene generata quando il codice inizia l'iterazione del secondo set di risultati. Il codice che esegue l'iterazione del primo set di risultati è già stato eseguito. Questo esempio è di dimensioni ridotte e non cambia le strutture di dati, pertanto è innocuo e facile da correggere. Tuttavia, in un programma più grande in cui i due oggetti iterator potrebbero essere creati in metodi figlio diversi, può risultare difficile trovare la causa radice. Se il primo metodo iterator ha modificato lo stato dei dati, può verificarsi anche il danneggiamento dei dati. È preferibile che l'eccezione venga generata immediatamente, prima dell'esecuzione di qualsiasi operazione. È possibile eseguire il refactoring del codice in modo che il metodo pubblico convalidi tutti gli argomenti e una funzione locale esegua l'enumerazione:\n\n[!code-csharp[IteratorMethodRefactored](~/samples/snippets/csharp/new-in-7/Iterator.cs#IteratorMethodLocalInteractive \"Iterator method refactored\")]\n\nLa versione precedente indica chiaramente che viene fatto riferimento al metodo locale solo nel contesto del metodo esterno. Le regole per le funzioni locali garantiscono inoltre che uno sviluppatore non possa chiamare accidentalmente la funzione locale da un'altra posizione nella classe accidentalmente e ignorare la convalida degli argomenti.\n\nLa stessa tecnica può essere usata con i metodi `async` per garantire che le eccezioni risultanti dalla convalida degli argomenti vengano generate prima che inizino le attività asincrone.\n\n> [!NOTE]\n> Alcune delle progettazioni supportate dalle funzioni locali possono essere eseguite anche usando le *espressioni lambda*. Per chi è interessato sono disponibili [altre informazioni sulle differenze](../../local-functions-vs-lambdas.md).\n"
- content: L'esplorazione delle nuove funzionalità principali di C# 7 è stata completata. È ora possibile provare tali funzionalità autonomamente nelle proprie applicazioni. È possibile visualizzare l'elenco completo nell'articolo sulle [novità di C# 7](../../whats-new/csharp-7.md).
