### YamlMime:Tutorial
title: Usare l'interpolazione di stringhe per la costruzione di stringhe formattate
metadata:
  title: Interpolazione di stringhe - Esercitazione interattiva su C#
  description: In questa esercitazione si apprenderà come usare il browser per esplorare in modo interattivo la funzionalità dell'interpolazione di stringhe in C#. Verranno descritte le procedure per scrivere codice C# e visualizzare i risultati della compilazione ed esecuzione del codice direttamente nel browser.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 5490176d91a6ed900471e33af6adce1fa3e62d8f
  ms.sourcegitcommit: a3db1a9eafca89f95ccf361bc1833b47fbb2bb30
  ms.translationtype: HT
  ms.contentlocale: it-IT
  ms.lasthandoff: 04/04/2019
  ms.locfileid: "58921381"
items:
- durationInMinutes: 2
  content: >
    Questa esercitazione descrive come usare l'[interpolazione di stringhe](../../language-reference/tokens/interpolated.md) per inserire i valori in un'unica stringa. Descrive anche come controllare la formattazione del testo della stringa dei risultati. È necessario usare il browser per scrivere ed eseguire codice C# e visualizzare immediatamente i risultati.
- title: Creare una stringa interpolata
  durationInMinutes: 2
  content: >
    Eseguire il codice seguente nella finestra interattiva. A tale scopo, digitare il codice nella finestra interattiva (sostituire `<name>` con il proprio nome) e selezionare **Esegui**:


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    Quando si esegue il codice, **Output** visualizza una stringa contenente il nome dell'utente nel messaggio di saluto. L'argomento di stringa della chiamata al metodo <xref:System.Console.WriteLine%2A> è una *stringa interpolata*. Si tratta di un tipo di modello che consente di costruire un'unica stringa detta *stringa di risultato* da una stringa che include codice incorporato. Le stringhe interpolate sono particolarmente utili per inserire valori in una stringa o per concatenare (unire) più stringhe.


    L'esempio precedente contiene i due elementi che devono essere presenti in ogni stringa interpolata:


    - Un valore letterale stringa che inizia con il carattere `$` prima delle virgolette inglesi aperte. Tra il simbolo `$` e le virgolette non devono essere presenti spazi. Per vedere che cosa accade se si include uno spazio, inserirne uno dopo il carattere `$` nella finestra interattiva ed eseguire il codice aggiornato. Il compilatore C# restituisce il messaggio "Carattere '$' imprevisto".


    - Una o più *espressioni interpolate*. Un'espressione interpolata è indicata tra parentesi graffe di apertura e chiusura (`{` e `}`). All'interno delle parentesi graffe è possibile inserire qualsiasi espressione C# che restituisce un valore, incluso `null`.


    Ora si proveranno altri esempi di interpolazione di stringhe con altri tipi di dati.


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Includere tipi di dati diversi
  durationInMinutes: 5
  content: >
    Nel passaggio precedente è stata usata l'interpolazione di stringhe per inserire una stringa in un'altra. Il risultato di un'espressione interpolata può avere qualsiasi tipo di dati. Includiamo valori di vari tipi di dati in una stringa interpolata.


    Nell'esempio seguente viene definito prima di tutto un tipo di dati [class](../../programming-guide/classes-and-structs/classes.md) `Vegetable` con la [proprietà](../../properties.md) `Name` e un [metodo](../../methods.md) `ToString` che esegue l'[override](../../language-reference/keywords/override.md) del comportamento del metodo <xref:System.Object.ToString?displayProperty=nameWithType>. Il [modificatore di accesso `public`](../../language-reference/keywords/public.md)rende tale metodo disponibile per qualsiasi codice client per ottenere la rappresentazione stringa di un'istanza di `Vegetable`. Nell'esempio il metodo `Vegetable.ToString` restituisce il valore della proprietà `Name` inizializzata nel [costruttore](../../programming-guide/classes-and-structs/constructors.md) `Vegetable`: `Vegetable(string name) => Name = name;`. Viene quindi creata un'istanza della classe `Vegetable` denominata `item` usando la [parola chiave `new`](../../language-reference/keywords/new-operator.md) e specificando un nome per il costruttore `Vegetable`. Infine, includere l'istanza in una stringa interpolata che contenga anche un valore <xref:System.DateTime>, un valore <xref:System.Decimal> e un valore di [enumerazione](../../programming-guide/enumeration-types.md)`Unit`. Eseguire il codice seguente nella finestra interattiva:


    ```csharp

    public class Vegetable

    {
       public Vegetable(string name) => Name = name;

       public string Name { get; }

       public override string ToString() => Name;
    }


    public enum Unit { item, kilogram, gram, dozen };


    var item = new Vegetable("eggplant");

    var date = DateTime.Now;

    var price = 1.99m;

    var unit = Unit.item;

    Console.WriteLine($"On {date}, the price of {item} was {price} per {unit}.");

    ```


    L'espressione interpolata `item` nella stringa interpolata restituisce il testo "eggplant" nella stringa di risultato. Questo accade perché, quando il tipo di risultato dell'espressione non è una stringa, il risultato restituisce una stringa nel modo seguente:


    - Se l'espressione interpolata restituisce `null`, viene usata una stringa vuota ("" o <xref:System.String.Empty?displayProperty=nameWithType>).


    - Se l'espressione interpolata non restituisce `null`, in genere viene chiamato il metodo `ToString` del tipo di risultato. È possibile testare questo processo aggiornando l'implementazione del metodo `Vegetable.ToString`. Potrebbe anche non essere necessario implementare il metodo `ToString`, poiché ogni tipo prevede un'implementazione di questo metodo. Per il test di questo funzionamento, impostare come commento la definizione del metodo `Vegetable.ToString` nell'esempio (facendola precedere dal simbolo di commento `//`). Nell'output la stringa "eggplant" viene sostituita dal nome completo del tipo (lo spazio dei nomi definito da REPL di C# insieme al nome di tipo). Questo è il funzionamento predefinito del metodo <xref:System.Object.ToString?displayProperty=nameWithType>. Il comportamento predefinito del metodo `ToString` per un tipo di enumerazione prevede la restituzione della rappresentazione stringa di un valore usato nella definizione dell'enumerazione.


    Nell'output di questo esempio la data è troppo precisa (il prezzo delle melanzane non varia ogni secondo) e il valore del prezzo non indica una valuta. Nel passaggio successivo si apprenderà come risolvere questi problemi controllando la formattazione delle rappresentazioni di stringa dei risultati delle espressioni.


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Controllare la formattazione delle espressioni interpolate
  durationInMinutes: 5
  content: >
    Nel passaggio precedente sono state inserite nella stringa di risultato due stringhe con formattazione imprecisa. Il primo problema è un valore di data e ora nel quale solo la data risultava corretta. Il secondo è un prezzo che non indica la valuta. Entrambi i problemi sono di facile risoluzione. L'interpolazione di stringhe consente di specificare *stringhe di formato* che controllano la formattazione di determinati tipi. Modificare la chiamata in `Console.WriteLine` dell'esempio precedente in modo da includere le stringhe di formato per le espressioni di data e prezzo, come indicato nella riga seguente:


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    Per specificare una stringa di formato, far seguire all'espressione interpolata i due punti (":") e la stringa di formato desiderata. "d" è un [stringa di formato data e ora standard](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) che rappresenta il formato di data breve. "C2" è una [stringa di formato numerico standard](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) che rappresenta un numero come valore di valuta con due cifre dopo il separatore decimale.


    Molti tipi delle librerie .NET supportano un set predefinito di stringhe di formato. Tali tipi includono tutti i tipi numerici e i tipi data e ora. Per l'elenco completo dei tipi che supportano le stringhe di formato, vedere [Stringhe di formato e tipi della libreria di classe .NET](../../../standard/base-types/formatting-types.md#stringRef) nell'articolo [Formattazione di tipi in .NET](../../../standard/base-types/formatting-types.md).


    Provare a modificare le stringhe di formato nell'esempio per vedere come cambia la formattazione della stringa di data e ora e del valore numerico. Modificare il valore "d" in `{date:d}` inserendo i valori "t" (per visualizzare il formato ora breve), "y" (per visualizzare anno e mese) e "yyyy" (per visualizzare l'anno come numero a quattro cifre). Modificare "C2" in `{price:C2}` inserendo "e" (per la notazione esponenziale) e "F3" (per un valore numerico con tre cifre dopo il separatore decimale).


    Oltre alla formattazione è possibile controllare la larghezza del campo e l'allineamento delle stringhe formattate incluse nella stringa di risultato. Il passaggio successivo indica come eseguire questa operazione.


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Controllare la larghezza del campo e l'allineamento delle espressioni interpolate
  durationInMinutes: 6
  content: >
    In genere quando il risultato di un'espressione interpolata è formattato in una stringa, questa viene inclusa in una stringa di risultato senza spazi iniziali o finali. In particolare quando si usa un set di dati, la possibilità di controllare la larghezza di un campo e l'allineamento del testo consente di generare un output più leggibile. Per verificarlo, eseguire il codice seguente:


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    I nomi degli elementi vengono allineati a sinistra e le quantità corrispondenti vengono allineate a destra. Per specificare l'allineamento, aggiungere una virgola (",") dopo un'espressione interpolata e indicare la larghezza *minima* del campo. Se il valore specificato è un numero positivo, il campo è allineato a destra. Se è un numero negativo, il campo è allineato a sinistra.


    Provare a rimuovere il segno negativo dal codice `{"Item",-25}` e `{item.Key,-25}` ed eseguire di nuovo l'esempio. Questa volta i nomi degli elementi vengono allineati a destra.


    È possibile combinare un identificatore di allineamento e una stringa di formato per un'unica espressione interpolata. A tale scopo, specificare prima l'allineamento, seguito da due punti e dalla stringa di formato. Provare il codice seguente, che visualizza tre stringhe formattate con larghezze di campo definite:


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    È stata completata l'esercitazione interattiva sull'interpolazione di stringhe. Fare clic sul collegamento **Raccolte in C#** qui sotto per avviare la prossima esercitazione interattiva oppure visitare il [sito Web .NET](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) per scaricare .NET Core SDK, creare un progetto nel proprio computer e continuare a scrivere codice. Il passaggio "Per continuare ad apprendere" consente di tornare a queste esercitazioni.


    Per altre informazioni, vedere [Interpolazione di stringhe](../../language-reference/tokens/interpolated.md).
