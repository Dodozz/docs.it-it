### YamlMime:Tutorial
title: <span data-ttu-id="fe04d-101">Esplorare C# 6- C# Interactive - Esercitazione su C#</span><span class="sxs-lookup"><span data-stu-id="fe04d-101">Explore C# 6 - C# interactive C# tutorial</span></span>
metadata:
  title: 'Esplorare C# 6: provare le nuove funzionalità in C# 6 in modo interattivo, usando il browser'
  description: In questa esercitazione si userà il browser per esplorare C# 6 in modo interattivo. Si esamineranno i nuovi che è possibile usare con C# 6 che rendono il codice più conciso e leggibile.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: c44d16e543f85852cee39106688fd3870dff7c4d
  ms.sourcegitcommit: c3cf1ace8a1d403aeae76d8976d01995893d2536
  ms.translationtype: HT
  ms.contentlocale: it-IT
  ms.lasthandoff: 02/07/2019
  ms.locfileid: "55807044"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="fe04d-105">Questa esercitazione consente di esplorare C# 6 in modo interattivo, usando il browser per scrivere codice C# e visualizzare i risultati della compilazione e dell'esecuzione del codice.</span><span class="sxs-lookup"><span data-stu-id="fe04d-105">This tutorial lets you explore C# 6 interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="fe04d-106">L'esercitazione contiene una serie di lezioni che modificano le procedure C# precedenti, in modo da usare le nuove funzionalità, più concise, del linguaggio C# 6.</span><span class="sxs-lookup"><span data-stu-id="fe04d-106">It contains a series of lessons that modify earlier C# practices to use newer, more concise C# 6 features.</span></span> <span data-ttu-id="fe04d-107">Il resto di questo articolo offre una panoramica di ognuna di queste funzionalità, con un collegamento per esplorare ciascuna di esse più in dettaglio.</span><span class="sxs-lookup"><span data-stu-id="fe04d-107">The rest of this article provides an overview of each of these features, with a link to explore each feature.</span></span>
- title: <span data-ttu-id="fe04d-108">Abilitazione dei tipi di sola lettura tramite le proprietà automatiche</span><span class="sxs-lookup"><span data-stu-id="fe04d-108">Read-only auto-properties enable read-only types</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"fe04d-109\">Due miglioramenti alla sintassi delle proprietà automatiche rendono più semplice l'uso di tali proprietà in più punti all'interno del codice: le proprietà automatiche di sola lettura e gli inizializzatori di proprietà automatiche.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-109\">Two enhancements to auto-property syntax make it easier to use auto-properties in more places: read-only auto-properties and auto-property initializers.</span></span> <span data-ttu-id=\"fe04d-110\">Si consideri questo piccolo programma:</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-110\">Consider this small program:</span></span>\n\n[!code-csharp[Starter](../../../../samples/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n <span data-ttu-id=\"fe04d-111\">Attivare la modalità focale e copiare il codice precedente nella finestra interattiva C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-111\">Enter Focus mode, copy the preceding code into the C# interactive window.</span></span> <span data-ttu-id=\"fe04d-112\">Fare quindi clic su *Esegui* per visualizzare il risultato dell'esecuzione del codice.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-112\">Then, click *Run* to see what the code does.</span></span> <span data-ttu-id=\"fe04d-113\">`AllCaps` ha l'effetto indesiderato di modificare i valori della proprietà e di restituire la stringa in caratteri maiuscoli.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-113\">`AllCaps` has the undesirable side effect of modifying the property values along with returning the uppercase string.</span></span> <span data-ttu-id=\"fe04d-114\">L'autore della classe `Person` voleva che le stringhe `FirstName` e `LastName` fossero di sola lettura.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-114\">The author of the `Person` class intended the strings for `FirstName` and `LastName` to be read-only.</span></span> <span data-ttu-id=\"fe04d-115\">Con C# 6 è possibile rendere chiara tale finalità.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-115\">With C# 6, you can make that intent clear.</span></span> <span data-ttu-id=\"fe04d-116\">Rimuovere `private set` da entrambe le proprietà per creare una proprietà automatica di sola lettura.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-116\">Remove the `private set` from both properties to create a read-only auto property.</span></span> <span data-ttu-id=\"fe04d-117\">Fare clic su *Esegui* per verificare che il compilatore individui le due posizioni in cui le proprietà `FirstName` e `LastName` vengono modificate quando non è consentito.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-117\">Click *Run* to see that the compiler spots the two locations where the `FirstName` and `LastName` properties are changed when they should not have been.</span></span> <span data-ttu-id=\"fe04d-118\">È possibile modificare il metodo `AllCaps` come indicato nel codice seguente per correggere l'errore del compilatore:</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-118\">You can change the `AllCaps` method to the following code to fix the compiler error:</span></span>\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\n<span data-ttu-id=\"fe04d-119\">Usando questa nuova sintassi, il compilatore assicura che le proprietà non siano modificabili.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-119\">Using this new syntax, the compiler ensures that the properties are immutable.</span></span>\n"
- title: <span data-ttu-id="fe04d-120">Inizializzare campi sottostanti per le proprietà automatiche</span><span class="sxs-lookup"><span data-stu-id="fe04d-120">Initialize backing fields for auto-properties</span></span>
  durationInMinutes: 1
  content: "<span data-ttu-id=\"fe04d-121\">La nuova sintassi del linguaggio C# 6 consente di usare inizializzatori per le proprietà automatiche.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-121\">New syntax in C# 6 enables you to use initializers for auto-properties.</span></span> <span data-ttu-id=\"fe04d-122\">Questa funzione diventa più importante man mano che le classi sviluppano nuove funzionalità.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-122\">This becomes more important as classes grow new capabilities.</span></span> <span data-ttu-id=\"fe04d-123\">Aggiungere alla classe `Person` una proprietà MiddleName e un nuovo costruttore che accetta tre stringhe:</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-123\">Add a middle name property, and a new constructor that takes three strings to your `Person` class:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\n<span data-ttu-id=\"fe04d-124\">L'assegnazione alla proprietà `MiddleName` è un inizializzatore</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-124\">The assignment on the `MiddleName` property is an initializer.</span></span> <span data-ttu-id=\"fe04d-125\">che inizializza il campo sottostante generato dal compilatore per il secondo nome.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-125\">It initializes the compiler-generated backing field for the middle name.</span></span>\n"
- title: <span data-ttu-id="fe04d-126">Membri con corpo di espressione</span><span class="sxs-lookup"><span data-stu-id="fe04d-126">Expression-bodied members</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="fe04d-127">I membri con corpo di espressione offrono una sintassi leggera per metodi leggeri.</span><span class="sxs-lookup"><span data-stu-id="fe04d-127">Expression-bodied members provide a lightweight syntax for lightweight methods.</span></span> <span data-ttu-id="fe04d-128">La classe `Person` contiene due ottimi candidati per tale funzione.</span><span class="sxs-lookup"><span data-stu-id="fe04d-128">The `Person` class has two great candidates.</span></span> <span data-ttu-id="fe04d-129">Esaminare la dichiarazione di `ToString`:</span><span class="sxs-lookup"><span data-stu-id="fe04d-129">Look at the declaration of `ToString`:</span></span>


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    <span data-ttu-id="fe04d-130">Sostituire la dichiarazione di `ToString` con il codice seguente:</span><span class="sxs-lookup"><span data-stu-id="fe04d-130">Replace that declaration of `ToString` with the following code:</span></span>


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    <span data-ttu-id="fe04d-131">Provare la stessa operazione con il metodo `AllCaps`.</span><span class="sxs-lookup"><span data-stu-id="fe04d-131">Try the same with the `AllCaps` method.</span></span> <span data-ttu-id="fe04d-132">Si tratta di un piccolo miglioramento, ma quando viene usato con criterio consente di creare codice molto più leggibile, soprattutto per gli oggetti DTO (Data Transfer Object) e per altri tipi con comportamento minimo.</span><span class="sxs-lookup"><span data-stu-id="fe04d-132">This is a small improvement, but when used wisely it creates much more readable code, especially for Data Transfer Objects (DTOs) and other types with minimal behavior.</span></span>
- title: <span data-ttu-id="fe04d-133">Importazione di una classe singola</span><span class="sxs-lookup"><span data-stu-id="fe04d-133">Importing a single class</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"fe04d-134\">Se in tutto il codice si usano più volte metodi statici di una classe indicando ogni volta il nome della classe, il codice diventa di difficile comprensione.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-134\">If you repeatedly use one class' static methods throughout your code, including the class name each time obscures the meaning of your code.</span></span> <span data-ttu-id=\"fe04d-135\">La classe `Person` attualmente importa lo spazio dei nomi `System`, anche se viene usato solo il metodo <xref:System.Console?displayProperty=nameWithType>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-135\">The `Person` class currently imports the `System` namespace, even though only <xref:System.Console?displayProperty=nameWithType> is used.</span></span> <span data-ttu-id=\"fe04d-136\">Modificare l'istruzione `using` come segue:</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-136\">Modify the `using` statement as follows:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\n<span data-ttu-id=\"fe04d-137\">L'istruzione `static using` è più utile all'interno di programmi di dimensioni maggiori che fanno ampio uso di un'unica classe con molti metodi statici, ad esempio la classe [`string` ](xref:System.String) o <xref:System.Math?displayProperty=nameWithType>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-137\">The `static using` statement becomes more useful in larger programs that make extensive use of a single class with many static methods, like the [`string`](xref:System.String) class or the <xref:System.Math?displayProperty=nameWithType> class.</span></span>\n"
- title: <span data-ttu-id="fe04d-138">Formato stringa più efficiente</span><span class="sxs-lookup"><span data-stu-id="fe04d-138">A better string format</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"fe04d-139\">C# 6 contiene una nuova sintassi per la composizione di stringhe da una stringa e di espressioni incorporate che vengono valutate per produrre altri valori stringa.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-139\">C# 6 contains new syntax for composing strings from a string and embedded expressions that are evaluated to produce other string values.</span></span> <span data-ttu-id=\"fe04d-140\">È possibile modificare i metodi `ToString` e `AllCaps` in modo da usare la sintassi seguente:</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-140\">You can change the `ToString` and `AllCaps` methods to use this syntax:</span></span>\n\n[!code-csharp[StringInterpolation](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\n<span data-ttu-id=\"fe04d-141\">Anziché argomenti posizionali, tra `{` e `}` si scrivono direttamente espressioni C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-141\">Instead of positional arguments between the `{` and `}`, you write C# expressions directly.</span></span> <span data-ttu-id=\"fe04d-142\">È possibile eseguire la stessa operazione per il metodo `Main`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-142\">You can do the same in the `Main` method.</span></span> <span data-ttu-id=\"fe04d-143\">Sostituire il codice esistente con quello seguente:</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-143\">Replace the existing code with the following:</span></span>\n\n[!code-csharp[InterpolationMain](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\n<span data-ttu-id=\"fe04d-144\">In queste espressioni è possibile includere più variabili.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-144\">You're not limited to a single variable in these expressions.</span></span> <span data-ttu-id=\"fe04d-145\">Si inizierà modificando un nuovo esempio per illustrare altre espressioni utilizzabili con l'interpolazione di stringhe.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-145\">Let's start with a new example and modify it to demonstrate other expressions you can use with string interpolation.</span></span> <span data-ttu-id=\"fe04d-146\">Incollare il codice seguente nella finestra interattiva nel metodo `Main`:</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-146\">Paste the following code into the interactive window in the `Main` method:</span></span>\n\n[!code-csharp[Phrases](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \n\n<span data-ttu-id=\"fe04d-147\">È possibile rimuovere la variabile locale `average` ed eseguire il calcolo nell'ambito dell'espressione stringa interpolata.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-147\">You can remove the local variable `average` and perform that calculation as part of the interpolated string expression.</span></span> <span data-ttu-id=\"fe04d-148\">Sostituire le ultime due righe con il codice seguente:</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-148\">Replace the last two lines with the following:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\n<span data-ttu-id=\"fe04d-149\">Eseguendo l'esempio precedente si può vedere che l'output per `Average` ha più posizioni decimali del necessario.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-149\">Running the preceding example, you would find that the output for `Average` has more decimal places than you would like.</span></span> <span data-ttu-id=\"fe04d-150\">La sintassi di interpolazione delle stringhe supporta tutte le stringhe di formato disponibili usando i metodi di formattazione precedenti.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-150\">The string interpolation syntax supports all the format strings available using earlier formatting methods.</span></span> <span data-ttu-id=\"fe04d-151\">Specificare la stringa di formato tra parentesi graffe.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-151\">You specify the format string inside the braces.</span></span> <span data-ttu-id=\"fe04d-152\">Aggiungere `:` dopo l'espressione da formattare:</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-152\">Add a `:` following the expression to format:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: <span data-ttu-id="fe04d-153">Controlli Null semplici e rapidi</span><span class="sxs-lookup"><span data-stu-id="fe04d-153">Quick and easy null checks</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"fe04d-154\">L'operatore `?.` (operatore condizionale Null) rende più semplice scrivere logica che tenga conto dei valori `null` in modo trasparente, senza controlli `if` aggiuntivi.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-154\">The `?.` (null conditional) operator makes it easier to write logic that takes `null` values into account seamlessly, without extra `if` checks.</span></span> <span data-ttu-id=\"fe04d-155\">Per esplorare questa funzionalità, iniziare copiando il codice seguente nella finestra interattiva e provarlo:</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-155\">To explore the feature, start by copying the following code into the interactive window to try it:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\n<span data-ttu-id=\"fe04d-156\">Quando si esegue l'esempio, viene generata un'eccezione <xref:System.NullReferenceException>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-156\">It throws a <xref:System.NullReferenceException> when you run the sample.</span></span> <span data-ttu-id=\"fe04d-157\">Sostituire l'operatore di accesso ai membri `.` con l'**operatore condizionale Null**:</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-157\">Change the `.` member access operator to the **null conditional operator**:</span></span>\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\n<span data-ttu-id=\"fe04d-158\">Dopo questa modifica, non si ottiene alcun output,</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-158\">After this change, there's no output.</span></span> <span data-ttu-id=\"fe04d-159\">perché il risultato di `s?.Length` è `int?`, mentre il risultato di `s.Length` è `int`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-159\">That's because the result of `s?.Length` is an `int?` when the result of `s.Length` is an `int`.</span></span> <span data-ttu-id=\"fe04d-160\">In questo esempio, `s?.Length` è `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-160\">In this example, `s?.Length` is `null`.</span></span> <span data-ttu-id=\"fe04d-161\">`?.` restituisce `null` se l'operando sinistro è `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-161\">The `?.` returns `null` if its left operand is `null`.</span></span> <span data-ttu-id=\"fe04d-162\">Se il tipo dell'operando destro è un tipo valore, l'operatore `?.` restituisce un tipo nullable per quel tipo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-162\">If the type of the right operand is a value type, the `?.` operator returns a nullable type for that type.</span></span> <span data-ttu-id=\"fe04d-163\">Oltre a `?.`, per l'accesso a una matrice o a un indicizzatore è possibile usare `?[]`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-163\">In addition to `?.` you can use `?[]` for array or indexer access.</span></span> <span data-ttu-id=\"fe04d-164\">Provare il codice seguente nella finestra interattiva:</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-164\">Try the following code in the interactive window:</span></span>\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n <span data-ttu-id=\"fe04d-165\">È possibile combinare più operatori condizionali in un'unica espressione.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-165\">Multiple conditional operators can be combined into a single expression.</span></span> <span data-ttu-id=\"fe04d-166\">Un operando sinistro `null` genera un risultato `null`, rendendo più semplice evitare clausole if annidate per accedere a membri di membri.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-166\">A `null` left operand produces a `null` result, making it easy to avoid nested if clauses to access members of members.</span></span> <span data-ttu-id=\"fe04d-167\">Provare ad esempio il codice seguente nella finestra interattiva:</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-167\">For example, try the following code in the interactive window:</span></span>\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue);\n ```\n\n <span data-ttu-id=\"fe04d-168\">È possibile semplificare l'esempio precedente usando l'**operatore di unione Null** per specificare un valore predefinito:</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-168\">The preceding example can be simplified by using the **null coalescing operator** to provide a default value:</span></span>\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n <span data-ttu-id=\"fe04d-169\">L'**operatore condizionale Null** rende più semplice scrivere codice con una logica di base chiara eseguendo nello stesso tempo il test dei valori `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-169\">The **null conditional operator** helps you write code that makes your core logic clear while seamlessly testing for `null` values.</span></span>\n"
- title: <span data-ttu-id="fe04d-170">Filtri eccezioni</span><span class="sxs-lookup"><span data-stu-id="fe04d-170">Exception filters</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"fe04d-171\">I filtri eccezioni consentono di intercettare un'eccezione in base a una condizione.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-171\">Exception filters enable you to catch an exception based on some condition.</span></span> <span data-ttu-id=\"fe04d-172\">Un uso tipico consiste nel creare un metodo di filtro che registra le eccezioni ma non le gestisce mai.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-172\">A typical use is to create a filter method that logs exceptions, but never handles those exceptions.</span></span> <span data-ttu-id=\"fe04d-173\">Un filtro eccezioni è un'espressione booleana il cui valore è `true` quando la clausola `catch` deve essere eseguita e `false` quando l'eccezione non deve essere intercettata dalla clausola `catch`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-173\">An exception filter is a boolean expression that is `true` when the `catch` clause should be executed, and `false` when the exception should not be caught by the `catch` clause.</span></span> <span data-ttu-id=\"fe04d-174\">Provare il codice seguente nella finestra interattiva: Registra il tipo di eccezione e il messaggio nella console.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-174\">Try the following code in the interactive window: It logs the exception type and message to the console.</span></span> <span data-ttu-id=\"fe04d-175\">Restituisce `false`, che indica che l'eccezione non può essere gestita.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-175\">It returns `false` which indicates that the exception can't be handled.</span></span> <span data-ttu-id=\"fe04d-176\">Provare il programma nella finestra interattiva.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-176\">Try the program in the interactive window.</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\n<span data-ttu-id=\"fe04d-177\">Dovrebbe essere visualizzato il messaggio dal metodo `LogException`, seguito dal messaggio di eccezione predefinito.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-177\">You should see the message from the `LogException` method, followed by the default exception message.</span></span> <span data-ttu-id=\"fe04d-178\">A titolo di esperimento, modificare l'istruzione `return false` in `return true` e rieseguirla.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-178\">Just to experiment, change the `return false` statement to `return true` and run this again.</span></span> <span data-ttu-id=\"fe04d-179\">L'eccezione viene ora intercettata e il programma viene eseguito fino al completamento.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-179\">Now, the exception is caught and the program runs to completion.</span></span>\n\n<span data-ttu-id=\"fe04d-180\">Oltre che negli scenari di registrazione, i filtri eccezioni possono essere particolarmente utili quando l'azione da intraprendere viene determinata da una proprietà dell'eccezione.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-180\">Beyond logging scenarios, exception filters can be most useful when a property of the exception determines what action to take.</span></span> <span data-ttu-id=\"fe04d-181\">È ad esempio possibile esaminare in dettaglio l'eccezione <xref:System.AggregateException> per vedere quali sono le eccezioni al suo interno ed eseguire un'azione appropriata a seconda dell'eccezione.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-181\">For example, you can look inside an <xref:System.AggregateException> to see what the contained exceptions are and take some appropriate action depending on the specific exception.</span></span>\n"
- title: <span data-ttu-id="fe04d-182">Uso di nameof</span><span class="sxs-lookup"><span data-stu-id="fe04d-182">Using nameof</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"fe04d-183\">L'operatore `nameof` restituisce il nome di una variabile, di un tipo o del membro di un tipo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-183\">The `nameof` operator returns the name of any variable, a type, or a type's member.</span></span> <span data-ttu-id=\"fe04d-184\">Per vedere come funziona, provare il codice seguente nella finestra interattiva:</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-184\">Try the following code in the interactive window to see how it works:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\n<span data-ttu-id=\"fe04d-185\">L'output corrisponde al nome della variabile o del tipo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-185\">The output matches the name of the variable or type.</span></span> <span data-ttu-id=\"fe04d-186\">Anche se si specifica il nome completo del tipo (ad esempio `System.String`) l'operatore `nameof` restituisce il nome non qualificato.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-186\">Even when you provided the fully qualified type name (such as `System.String`) the `nameof` operator returns the unqualified name.</span></span> <span data-ttu-id=\"fe04d-187\">Questa funzionalità è particolarmente utile quando è necessario convertire il nome di un parametro o di una proprietà in una stringa,</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-187\">This feature is most useful when you need to convert a parameter or property name to a string.</span></span> <span data-ttu-id=\"fe04d-188\">ad esempio quando si acquisisce il nome di un argomento per la generazione di un'eccezione <xref:System.ArgumentNullException> o <xref:System.ArgumentException>, o quando si acquisisce il nome di una proprietà modificata durante l'implementazione di <xref:System.ComponentModel.INotifyPropertyChanged>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-188\">Examples include capturing the name of an argument for throwing a <xref:System.ArgumentNullException> or <xref:System.ArgumentException>, or capturing the name of a changed property when implementing <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span> \n"
- title: <span data-ttu-id="fe04d-189">Nuova sintassi di inizializzazione degli oggetti</span><span class="sxs-lookup"><span data-stu-id="fe04d-189">New object initialization syntax</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"fe04d-190\">La nuova sintassi di inizializzazione degli oggetti consente di creare metodi che rendono più semplice inizializzare dizionari e altri tipi.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-190\">New object initialization enables you to create methods that make it easier to initialize dictionaries, and other types.</span></span> <span data-ttu-id=\"fe04d-191\">Iniziare con un dizionario.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-191\">Start with a dictionary.</span></span> <span data-ttu-id=\"fe04d-192\">Eseguire il codice seguente nella finestra interattiva:</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-192\">Run the following code in the interactive window:</span></span>\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\n<span data-ttu-id=\"fe04d-193\">È possibile estendere questa sintassi a qualsiasi classe che implementa <xref:System.Collections.IEnumerable> e ha un metodo `Add` accessibile pubblicamente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-193\">You can extend this syntax to any class that implements <xref:System.Collections.IEnumerable> and has a publicly accessible `Add` method.</span></span>  <span data-ttu-id=\"fe04d-194\">Provare l'esempio seguente nella finestra interattiva.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-194\">Try the following sample in the interactive window.</span></span> <span data-ttu-id=\"fe04d-195\">Questo esempio crea una classe `Path` che implementa `IEnumerable<Point3D>` e ha un metodo per aggiungere punti che accetta tre argomenti.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-195\">It creates a `Path` class that implements `IEnumerable<Point3D>` and has a method to add points that takes three arguments.</span></span> <span data-ttu-id=\"fe04d-196\">Combina anche altre tecniche già illustrate in questa esercitazione, ad esempio i membri con corpo di espressione e l'interpolazione di stringhe.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-196\">It also combines other techniques already demonstrated in this tutorial, such as expression-bodied members and string interpolation.</span></span> \n\n<span data-ttu-id=\"fe04d-197\">Nel metodo `Main` si inizializza un percorso indicando le coordinate per i punti.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-197\">In the `Main` method, you initialize a path by providing coordinates for the points.</span></span> <span data-ttu-id=\"fe04d-198\">Tali punti vengono aggiunti alla raccolta tramite il metodo `Add`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-198\">Those points are added to the collection through the `Add` method.</span></span>\n\n<span data-ttu-id=\"fe04d-199\">Il metodo `Add` può essere anche un metodo di estensione.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-199\">The `Add` method can also be an extension method.</span></span> <span data-ttu-id=\"fe04d-200\">È possibile aggiornare l'esempio precedente come indicato di seguito.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-200\">You could update the preceding sample as follows.</span></span> <span data-ttu-id=\"fe04d-201\">La compilazione di questo esempio non riesce nell'esperienza interattiva a causa delle limitazioni della sandbox.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-201\">This sample won't compile in the interactive experience because of sandbox limitations.</span></span> <span data-ttu-id=\"fe04d-202\">È possibile provare l'esempio nel computer in uso.</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe04d-202\">You can try it on your own machine.</span></span>\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: <span data-ttu-id="fe04d-203">L'esplorazione delle nuove funzionalità del linguaggio C# 6 è stata completata.</span><span class="sxs-lookup"><span data-stu-id="fe04d-203">You've completed an exploration of the new features in C# 6.</span></span> <span data-ttu-id="fe04d-204">È ora possibile provare tali funzionalità autonomamente nelle proprie applicazioni.</span><span class="sxs-lookup"><span data-stu-id="fe04d-204">Now try them yourself in your applications.</span></span>
